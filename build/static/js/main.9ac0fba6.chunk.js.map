{"version":3,"sources":["Pages/Chat/index.tsx","Contexts/msg.tsx","Components/Navbar/index.tsx","Pages/Join/index.tsx","Pages/Chat/Message/index.tsx","Routes/routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["socket","MsgContext","React","createContext","MsgProvider","children","useState","name","setName","room","setRoom","messages","setMessages","Provider","value","useMsg","useContext","Navbar","className","Join","shouldRedirect","setShouldRedirect","from","to","onSubmit","e","preventDefault","htmlFor","required","maxLength","onChange","target","type","id","size","href","rel","Message","message","isSentByUser","user","trim","toLowerCase","text","Chat","location","setMessage","ENDPOINT","useEffect","io","emit","error","alert","search","on","console","log","map","i","key","event","color","Routes","path","exact","component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9ac0fba6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { FiArrowLeft } from 'react-icons/fi';\r\nimport { MdSend } from 'react-icons/md';\r\nimport { Redirect, RouteProps } from 'react-router-dom';\r\nimport Navbar from '../../Components/Navbar';\r\nimport { IMessage, useMsg } from '../../Contexts/msg';\r\nimport io from \"socket.io-client\";\r\nimport './style.css';\r\nimport Message from './Message';\r\nlet socket:any;\r\nconst Chat: React.FC<RouteProps> = ({location}) => {\r\n  const { name, room, setMessages, messages } = useMsg();\r\n  const [message, setMessage] = useState('');\r\n  const ENDPOINT = 'https://cotil-chat.herokuapp.com/';\r\n  \r\n  useEffect(()=>{\r\n    if(!name && !room) return;\r\n    socket = io(ENDPOINT);\r\n    socket.emit('join', { name, room }, (error:any) => {\r\n      if(error) {\r\n        alert(error);\r\n      }\r\n    });\r\n    // eslint-disable-next-line\r\n  },[ENDPOINT, location?.search])\r\n\r\n  useEffect(()=>{\r\n    socket?.on('message', (message: IMessage) => {\r\n      console.log(message)\r\n      setMessages([...messages, message]);\r\n    });\r\n    // eslint-disable-next-line\r\n  },[message])\r\n\r\n  const sendMessage = (event:any) => {\r\n    event.preventDefault();\r\n    if(message) {\r\n      socket?.emit('sendMessage', message, () => { setMessage('') });\r\n    }\r\n  }\r\n\r\n  if(!name && !room) return <Redirect to=\"/\"/>\r\n\r\n  return (\r\n    <>\r\n      <div className=\"content\">      \r\n        <Navbar>\r\n          <div className=\"nav-links\">\r\n            <a id=\"arrow-back\" href=\"/\">\r\n              <FiArrowLeft size={24} />\r\n            </a>\r\n            <h1 className=\"nav-title\">\r\n              Sala: {room}      \r\n            </h1>\r\n          </div>\r\n        </Navbar>\r\n        <div id=\"interface\">\r\n          <div id=\"interface-content\">\r\n            <div id=\"chat\">\r\n              {\r\n                messages.map((message, i) =>(\r\n                  <Message key={i} message={message}/>\r\n                ))\r\n              }\r\n            </div>\r\n            <form id=\"msg-form\" onSubmit={sendMessage}>\r\n              <input type=\"text\" value={message} onChange={e=>setMessage(e.target.value)} className=\"input\"/>\r\n              <button id=\"btn-send\" type=\"submit\">\r\n                <MdSend size={24} color=\"#DEDEDE\"/>\r\n              </button>\r\n            </form> \r\n          </div>\r\n          <footer>\r\n            <p>\r\n              <a href=\"https://github.com/guiguat/simple-chat\" target=\"_blank\" rel=\"noopener noreferrer\"> \r\n                Made with ♥ by <br className=\"mobile\"/> \r\n                Guilherme Guatura\r\n                & Iuri Corrêa\r\n              </a>\r\n            </p>\r\n          </footer>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chat;","import React, {useState, useContext} from 'react';\r\n\r\ninterface IMsgContext{\r\n    name:string;\r\n    room:string;\r\n    setName(name:string):void;\r\n    setRoom(room:string):void;\r\n    messages:IMessage[];\r\n    setMessages(messages:IMessage[]):void\r\n}\r\nexport interface IMessage{\r\n    user:string,\r\n    text:string\r\n}\r\n\r\nexport const MsgContext = React.createContext<IMsgContext>({} as IMsgContext);\r\n\r\nexport const MsgProvider: React.FC = ({children}) => {\r\n    const[name, setName] = useState(\"\");\r\n    const[room, setRoom] = useState(\"\");\r\n    const[messages, setMessages] = useState<IMessage[]>([])\r\n    return (\r\n        <MsgContext.Provider value={ { name, room, setName, setRoom, messages, setMessages } }>\r\n        {children}\r\n        </MsgContext.Provider>\r\n    );\r\n}\r\n\r\nexport const useMsg = () => useContext(MsgContext);","import React from 'react';\r\nimport './navbar.css';\r\n\r\nconst Navbar: React.FC = ({children}) => {\r\n  return (\r\n      <nav className=\"navbar\">\r\n          {children}\r\n      </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React, { useState } from 'react';\r\nimport Navbar from '../../Components/Navbar';\r\nimport { FiLogIn } from \"react-icons/fi\";\r\nimport { Redirect } from 'react-router';\r\nimport { useMsg } from '../../Contexts/msg';\r\n\r\nconst Join: React.FC = () => {\r\n  const { name, setName, room, setRoom } = useMsg();\r\n  const[shouldRedirect, setShouldRedirect] = useState(false);\r\n\r\n  function handleJoinSubmit(e:any){\r\n    e.preventDefault()\r\n    setShouldRedirect(true);\r\n  }\r\n  \r\n  if(shouldRedirect) return <Redirect from=\"/join\" to=\"/chat\"/>\r\n\r\n  return (\r\n    <>                                                \r\n      <div className=\"content\">\r\n        <Navbar>\r\n          <h1 className=\"nav-title\">\r\n            COTIL CHAT       \r\n          </h1>\r\n        </Navbar>\r\n        <h2>Entre na sala:</h2>\r\n        <form onSubmit={handleJoinSubmit} className=\"join-form\">  \r\n            <label htmlFor=\"name\">Nome:</label>\r\n            <input className=\"input\"\r\n             required value={name}\r\n             maxLength={20}\r\n             onChange={e=>setName(e.target.value)}/>\r\n            <label htmlFor=\"room\">Código da sala:</label>\r\n            <input className=\"input\" required value={room} onChange={e=>setRoom(e.target.value)}/>\r\n            <button type=\"submit\" className=\"btn\" id=\"btn-join\">\r\n              <FiLogIn size={24} className=\"btn-icon\"/>Entrar\r\n            </button>\r\n        </form>  \r\n        <footer>\r\n          <p>\r\n            <a href=\"https://github.com/guiguat/simple-chat\" target=\"_blank\" rel=\"noopener noreferrer\"> \r\n              Made with ♥ by <br className=\"mobile\"/> \r\n              Guilherme Guatura\r\n              & Iuri Corrêa\r\n            </a>  \r\n          </p>\r\n        </footer>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Join;","import React from 'react';\r\nimport { IMessage, useMsg } from '../../../Contexts/msg';\r\n\r\nconst Message: React.FC<{message:IMessage}> = ({message}) => {\r\n    const { name } = useMsg();\r\n    let isSentByUser = message.user === name.trim().toLowerCase()? true : false;\r\n\r\n    return (\r\n        <div className={`msg-body ${isSentByUser?\"user\":\"\"}`}>\r\n            <span className=\"msg-name\">{message.user}</span>\r\n            <p className=\"msg-content\">\r\n            { message.text }\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Join from '../Pages/Join';\r\nimport Chat from '../Pages/Chat';\r\n\r\n\r\nconst Routes: React.FC = () => {\r\n  return (\r\n      <Router>\r\n          <Switch>\r\n              <Route path=\"/\" exact component={Join} />\r\n              <Route path=\"/chat\" exact component={Chat} />\r\n          </Switch>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport { MsgProvider } from './Contexts/msg';\r\nimport Routes from './Routes/routes';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <MsgProvider>\r\n      <Routes />\r\n    </MsgProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}